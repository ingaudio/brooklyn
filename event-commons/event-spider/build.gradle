apply plugin: 'eclipse'

ext {
	env = (project.hasProperty('env') ? "${env}" : "dev")
}

/* Environment */
def envScript = file("${projectDir}/gradle/build-${env}.gradle")
if (!envScript.exists()) {
	throw new GradleException("Unknown Environment: $env")
  }
apply from: envScript
println "Current Environment: ${env}"

/* COMMON TASK */

task clean() {
	doLast {
		delete "${projectDir}/build"
		delete "${projectDir}/data"
	}
}

task cleanAll(dependsOn: ['clean']) {
	doLast {
		delete "${projectDir}/venv"
	}
}

task build() {
	doLast {
		println "NOT IMPLEMENTED!!!"
	}
}

task dist() {
	doLast {
		println "NOT IMPLEMENTED!!!"
	}
}

task deploy() {
	doLast {
		println "NOT IMPLEMENTED!!!"
	}
}

/* Specific Tasks */

task spiderSetupEnvironment() {
	doLast {
		//Create Environment If Needed
		if(!file("${projectDir}/venv/${env}").exists()) {
			//Prepare folder
			file("${projectDir}/venv").mkdirs()
			
			//Create Virtual Env
			project.exec { ExecSpec e ->
				e.workingDir=file("${projectDir}/venv").absolutePath
				e.commandLine='virtualenv'
				e.args = [ "${env}" ]
			}
			
			//Update Environment
			project.exec { ExecSpec e ->
				e.workingDir=file("${projectDir}/venv/${env}/bin").absolutePath
				e.commandLine='./pip'
				e.args = ['install', 'scrapy', 'pysolr', 'googlemaps', 'unidecode']
			}
	
		}

	}
}

task spiderCleanRaw() {
	doLast {
		delete "${projectDir}/data/raw"
	}
}

task spiderCleanStage() {
	doLast {
		delete "${projectDir}/data/stage"
	}
}

task spiderCleanLog() {
	doLast {
		delete "${projectDir}/data/live"
	}
}

task spiderBcn(dependsOn: [ 'spiderSetupEnvironment']) {
	doLast {		
		project.exec { ExecSpec e ->
			e.workingDir="${projectDir}"
			e.environment SOLR_ENDPOINT:"${solrEndpoint}"
			e.environment GOOGLE_KEY:"${googleKey}"
			e.commandLine='sh'
			e.args = ['run.sh', "${env}", "crawler/spiderBcn.py"]
		}
	}
}

task crawlerRaw(dependsOn: [ 'spiderSetupEnvironment']) {
	doLast {
		project.exec { ExecSpec e ->
			e.workingDir="${projectDir}"
			e.environment SOLR_ENDPOINT:"${solrEndpoint}"
			e.environment GOOGLE_KEY:"${googleKey}"
			e.commandLine='sh'
			e.args = ['run.sh', "${env}", "crawler/crawlerRaw.py"]
		}
	}
}

task crawlerStage(dependsOn: [ 'spiderSetupEnvironment']) {
	doLast {
		project.exec { ExecSpec e ->
			e.workingDir="${projectDir}"
			e.environment SOLR_ENDPOINT:"${solrEndpoint}"
			e.environment GOOGLE_KEY:"${googleKey}"
			e.commandLine='sh'
			e.args = ['run.sh', "${env}", "crawler/crawlerStage.py"]
		}
	}
}



task crawlerSync(dependsOn: [ 'spiderSetupEnvironment']) {
	doLast {
		project.exec { ExecSpec e ->
			e.workingDir="${projectDir}"
			e.environment SOLR_ENDPOINT:"${solrEndpoint}"
			e.environment GOOGLE_KEY:"${googleKey}"
			e.commandLine='sh'
			e.args = ['run.sh', "${env}", "crawler/crawlerSync.py"]
		}
	}
}

task crawlerGeo(dependsOn: [ 'spiderSetupEnvironment']) {
	doLast {
		project.exec { ExecSpec e ->
			e.workingDir="${projectDir}"
			e.environment SOLR_ENDPOINT:"${solrEndpoint}"
			e.environment GOOGLE_KEY:"${googleKey}"
			e.commandLine='sh'
			e.args = ['run.sh', "${env}", "crawler/crawlerGeo.py"]
		}
	}
}

